const catNode = document.querySelector('.div');
const mainNode = document.querySelector('.main');
const snowflakeNodes = Array.from(document.querySelectorAll('.snowflake'));
const menuGameNode = document.querySelector('#modal-block');

class Cat {
  x = 0;

  y = 0;
  // –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–∞—à–µ–≥–æ –∫–æ—Ç–∞ –ì–õ–ê–í–ù–ê–Ø

  catNode = null;

  parentNode = null;

  keyboardKeysPressed = [];

  scoreNode = document.querySelector('#score');

  snowflakeNodes = [];

  menuGameNode = null;

  constructor(catNode, parentNode, snowflakeNodes, menuGameNode) {
    this.catNode = catNode;
    this.parentNode = parentNode;
    this.snowflakeNodes = snowflakeNodes;
    this.menuGameNode = menuGameNode;

    if (this.catNode === null) {
      throw new Error('catNode –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    if (this.parentNode === null) {
      throw new Error('parentNode –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    if (this.snowflakeNodes.length === 0) {
      throw new Error('–ê—Å—Ç–µ—Ä–æ–∏–¥—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã');
    }

    this.onInit();
  }
  // —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã(—Ç–∞–π–º–µ—Ä, —Ü–µ–Ω—Ç—Ä–æ–≤–∫–∞ –∫–æ—Ç–∞ –∏ —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –∫–ª–∞–≤–∏—à)

  onInit() {
    this.addEventListeners();
    this.centeringCat();
    this.start();
  }
  // —Ü–µ–Ω—Ç—Ä–æ–≤–∫–∞ –∫–æ—Ç–∞, –µ–≥–æ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ

  centeringCat() {
    // getBoundingClientRect() - –Ω–æ–≤—É—é –æ—Ç–∫—Ä—ã–ª–∏ –¥–ª—è —Å–µ–±—è —à—Ç—É–∫—É –∏–∑ —Å–ª—É—à–∞—Ç–µ–ª—è,
    // –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ—É –æ –ø–æ–∑–∏—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–∞ –∏ –µ–≥–æ —Ä–∞–∑–º–µ—Ä–µ –≤ –æ–∫–Ω–µ
    const parentRect = this.parentNode.getBoundingClientRect();

    // –í—ã—á–∏—Å–ª—è–µ–º —Å–µ—Ä–µ–¥–∏–Ω—É —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞—Å –∫–æ—Ç–æ–º img –ø–æ –æ—Å–∏ X
    this.x = parentRect.left + (parentRect.width - this.catNode.offsetWidth) / 2;

    // –í—ã—á–∏—Å–ª—è–µ–º —Å–µ—Ä–µ–¥–∏–Ω—É —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –∫–æ—Ç–æ–º img –ø–æ –æ—Å–∏ Y
    this.y = parentRect.top + (parentRect.height - this.catNode.offsetHeight) / 2;

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—à–∫–µ —Å–µ—Ä–µ–¥–∏–Ω—É —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–∞–∫ –Ω–∞—á–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    this.catNode.style.left = `${this.x}px`;
    this.catNode.style.top = `${this.y}px`;
  }
  // —Å–ª—É—à–∞—Ç–µ–ª—å –Ω–∞ –∫–Ω–æ–ø–∫–∏ + –∑–∞–ø—É—Å–∫–∞–µ—Ç –º—É–∑—ã–∫—É

  addEventListeners() {
    document.addEventListener('keydown', this.moveLogic);
    document.addEventListener('keyup', this.keyUp);
    this.initMusic();
  }
  // –≤–∫–ª/–≤—ã–∫–ª –º—É–∑—ã–∫–∏

  initMusic() {
    const music = new Audio();
    music.src = './music/fun.mp3';
    music.autoplay = true;

    document.querySelector('#musicPlay').onclick = function () {
      music.play();
      music.loop = true;
    };
    document.querySelector('#musicStop').onclick = function () {
      music.pause();
    };
  }
  // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ

  checkForCollision() {
    for (let i = 0; i < this.snowflakeNodes.length; i += 1) {
      // –æ—Ç–ø—Ä–µ–¥–ª—è–µ—Ç —Ä–∞–∑–º–µ–º—ã –º–µ—Ç–µ–æ—Ä–∏—Ç–∞ –∏ –∫–æ—Ç–∏–∫–∞
      const snowflakeRect = this.snowflakeNodes[i].getBoundingClientRect();
      const catRect = this.catNode.getBoundingClientRect();
      // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
      if (
        catRect.x < snowflakeRect.x + snowflakeRect.width / 2 &&
        catRect.x + catRect.width / 2 > snowflakeRect.x &&
        catRect.y < snowflakeRect.y + snowflakeRect.height / 2 &&
        catRect.height / 2 + catRect.y > snowflakeRect.y
      ) {
        alert('You lose!\nBut it was a niceTry!ü•∫üëâüëà');
        // –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç URL –Ω–∞–ø–æ–¥–æ–±–∏–µ –∫–Ω–æ–ø–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
        location.reload();
      }
    }
  }
  // –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è

  moveLogic = (evt) => {
    const keypress = evt.key;

    this.keyboardKeysPressed.push(keypress);
    this.keyboardKeysPressed = this.keyboardKeysPressed.filter(
      (item, i, arr) => arr.indexOf(item) === i,
    );
    // –º–µ–Ω—é—à–∫–∞ –ø–æ esc
    if (keypress === 'Escape') {
      this.menuGameNode.classList.toggle('active');
    }
    // —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
    if (keypress === 'ArrowUp') {
      this.moveY(-40);
    }
    if (keypress === 'ArrowDown') {
      this.moveY(40);
    }
    if (keypress === 'ArrowLeft') {
      this.moveX(-40);
    }
    if (keypress === 'ArrowRight') {
      this.moveX(40);
    }
    // –¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏
    if (
      this.keyboardKeysPressed.includes('ArrowLeft') &&
      this.keyboardKeysPressed.includes('ArrowUp')
    ) {
      this.moveX(-30);
      this.moveY(-30);
    }

    if (
      this.keyboardKeysPressed.includes('ArrowRight') &&
      this.keyboardKeysPressed.includes('ArrowUp')
    ) {
      this.moveX(30);
      this.moveY(-30);
    }

    if (
      this.keyboardKeysPressed.includes('ArrowLeft') &&
      this.keyboardKeysPressed.includes('ArrowDown')
    ) {
      this.moveX(-30);
      this.moveY(30);
    }

    if (
      this.keyboardKeysPressed.includes('ArrowRight') &&
      this.keyboardKeysPressed.includes('ArrowDown')
    ) {
      this.moveX(30);
      this.moveY(30);
    }
    // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ
    this.checkForCollision();
  };
  // —Å–º–µ–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∫–æ—Ç–∏–∫–∞ –ª–µ–≤–æ/–ø—Ä–∞–≤–æ

  moveX(shiftX) {
    const lastX = this.x;

    this.x = this.x + shiftX;

    if (this.x < 0) {
      this.x = 0;
    }
    // offsetWidth —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—É—é —à–∏—Ä–∏–Ω—É —ç–ª–µ–º–µ–Ω—Ç–∞
    if (this.x > this.parentNode.offsetWidth - this.catNode.offsetWidth) {
      this.x = this.parentNode.offsetWidth - this.catNode.offsetWidth;
    }

    const nextX = this.x;

    if (nextX > lastX) {
      this.changeImageCat('right');
    } else {
      this.changeImageCat('left');
    }

    this.catNode.style.left = this.x + 'px';
  }

  moveY(shiftY) {
    this.y += shiftY;
    if (this.y < 0) {
      this.y = 0;
    }
    // offsetWidth —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—É—é —à–∏—Ä–∏–Ω—É —ç–ª–µ–º–µ–Ω—Ç–∞
    if (this.y > this.parentNode.offsetHeight - this.catNode.offsetHeight) {
      this.y = this.parentNode.offsetHeight - this.catNode.offsetHeight;
    }

    this.catNode.style.top = this.y + 'px';
  }

  changeImageCat(direction) {
    const catImageNode = this.catNode.querySelector('img');

    if (direction === 'left') {
      catImageNode.src = './img/cat.gif';
    } else if (direction === 'right') {
      catImageNode.src = './img/cat-r.gif';
    }
  }

  // –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è keyup –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
  // –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ keyboardKeysPressed, —á—Ç–æ–±—ã –æ—Ç—Ä–∞–∑–∏—Ç—å –∫–ª–∞–≤–∏—à–∏,
  // –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ –Ω–µ –Ω–∞–∂–∏–º–∞—é—Ç—Å—è.

  keyUp = (e) => {
    const keypress = e.key;
    this.keyboardKeysPressed = this.keyboardKeysPressed.filter(
      (el) => el !== keypress,
    );
  };

  // –¢–∞–π–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç –æ—Ç—Å—á–µ—Ç, –∫–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∏–≥—Ä–∞
  start() {
    window.timerId = window.setInterval(this.timer, 100);
  }
  // —Ä–∞–±–æ—Ç–∞ —Å idScore, —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω–ø—É—Ç–∞ –≤ –¢–∞–π–º–µ—Ä–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ

  timer = () => {
    this.checkForCollision();
    this.scoreNode.value = parseInt(this.scoreNode.value) + 1;
  };
}
// —Å–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞ –ö—ç—Ç
new Cat(catNode, mainNode, snowflakeNodes, menuGameNode); 
